- Testes manuais

	Os testes manuais em Java referem-se ao processo de teste de software que envolve a execução de testes de forma manual, onde um testador humano interage diretamente com o sistema para identificar e verificar bugs, falhas, erros e comportamentos inesperados.

	Durante os testes manuais, um testador humano segue um conjunto de instruções de teste, geralmente descritas em um documento de caso de teste ou plano de teste, para validar se o sistema está funcionando conforme o esperado e se atende aos requisitos definidos. O testador pode inserir dados em formulários, clicar em botões, navegar em menus, entre outras interações.

	Os testes manuais são importantes para validar a usabilidade do sistema, avaliar a experiência do usuário e testar cenários que podem ser difíceis de automatizar, como testes de usabilidade e testes exploratórios. No entanto, os testes manuais são mais suscetíveis a erros humanos e podem ser mais demorados e trabalhosos do que os testes automatizados.

- Testes automatizados

	Os testes automatizados em Java referem-se ao processo de teste de software que envolve a execução de testes de forma automatizada, onde o software é programado para executar os testes em vez de um testador humano interagir diretamente com o sistema.

	Durante os testes automatizados, um conjunto de testes é escrito em Java utilizando frameworks de testes como JUnit, TestNG ou Cucumber, entre outros. Esses testes são então executados automaticamente pelo software de teste, que verifica se o sistema está funcionando conforme o esperado e se atende aos requisitos definidos. Os testes automatizados geralmente são executados por meio de ferramentas de automação de testes, como Selenium WebDriver ou Appium, que simulam as interações do usuário com o sistema.

	Os testes automatizados são importantes para garantir a qualidade do software, aumentar a eficiência do processo de teste e permitir a execução rápida e repetida dos testes. Eles são especialmente úteis para testes de regressão, onde o software é testado novamente após uma mudança no código para garantir que a alteração não tenha causado novos problemas.

	Embora os testes automatizados sejam mais rápidos e menos suscetíveis a erros humanos do que os testes manuais, eles não podem substituir completamente os testes manuais. Os testes manuais são importantes para avaliar a usabilidade e a experiência do usuário e para testar cenários que podem ser difíceis de automatizar.

- Problemas dos testes manuais

	Os testes manuais em Java têm algumas limitações e problemas, que incluem:

	Erros humanos: Os testes manuais são executados por um testador humano, o que significa que há sempre a possibilidade de erros humanos, como esquecer de executar um teste ou executá-lo incorretamente. Além disso, os testadores podem ter diferentes níveis de habilidade e experiência, o que pode afetar a qualidade dos testes.

	Ineficiência e demora: Os testes manuais são geralmente mais demorados e trabalhosos do que os testes automatizados, o que pode levar a um processo de teste ineficiente e demorado. Além disso, os testadores precisam repetir os mesmos testes várias vezes, o que pode ser tedioso e propenso a erros.

	Dificuldade em cobrir todos os cenários: É difícil para um testador humano cobrir todos os cenários possíveis durante os testes manuais, o que pode levar a bugs e falhas não detectados.

	Custo: Os testes manuais são geralmente mais caros do que os testes automatizados, pois exigem mais recursos humanos e tempo de trabalho.

	Falta de escalabilidade: Os testes manuais podem ser difíceis de escalar para grandes projetos ou sistemas complexos, pois podem exigir um grande número de testadores humanos para executar os testes.

	Dificuldade em reproduzir bugs: É difícil para os testadores reproduzirem bugs de forma consistente durante os testes manuais, o que pode dificultar a identificação da causa raiz do problema.

	Falta de documentação: Os testes manuais podem ser menos documentados do que os testes automatizados, o que pode tornar difícil rastrear e gerenciar o processo de teste ao longo do tempo.

- Beneficios dos testes automatizados

	Os testes automatizados em Java oferecem uma série de benefícios em relação aos testes manuais, incluindo:

	Eficiência e rapidez: Os testes automatizados podem ser executados rapidamente e com eficiência, permitindo que o processo de teste seja mais rápido e eficaz em comparação com os testes manuais.

	Consistência: Os testes automatizados executam os mesmos testes com precisão e consistência a cada execução, eliminando a possibilidade de erros humanos e aumentando a confiabilidade dos testes.

	Cobertura abrangente: Os testes automatizados podem cobrir um grande número de cenários, permitindo que os testadores verifiquem todas as funcionalidades do sistema de forma abrangente e eficiente.

	Escalabilidade: Os testes automatizados podem ser facilmente escalados para grandes projetos ou sistemas complexos, permitindo que o processo de teste seja gerenciado de forma mais eficiente e eficaz.

	Identificação rápida de problemas: Os testes automatizados podem identificar rapidamente problemas e falhas no software, permitindo que as equipes de desenvolvimento e testes trabalhem juntas para resolver os problemas de forma eficiente.

	Documentação: Os testes automatizados geram documentação precisa e detalhada de cada teste, permitindo que as equipes de desenvolvimento e testes rastreiem o progresso do teste e identifiquem áreas que precisam de atenção adicional.

	Melhor qualidade do software: Os testes automatizados garantem que o software seja testado de forma abrangente e consistente, o que resulta em um software de maior qualidade e mais confiável para os usuários.

	Redução de custos: Embora os testes automatizados possam ser mais caros em termos de tempo e recursos na fase inicial de desenvolvimento, eles podem ajudar a reduzir os custos de longo prazo, evitando erros e bugs caros que podem surgir após o lançamento do software.

- Vantagens de criar o codigo primeiro e o teste depois

	Criar o código primeiro e o teste depois é uma abordagem comum de desenvolvimento de software que tem algumas vantagens, tais como:

	Clareza do objetivo: criando o código primeiro, o desenvolvedor pode ter uma ideia clara do que o código deve fazer e quais são os seus requisitos antes de começar a escrever os testes. Isso pode ajudar a evitar testes desnecessários ou redundantes e garantir que os testes se concentrem nos requisitos críticos do código.

	Flexibilidade: escrever os testes depois de criar o código permite ao desenvolvedor ajustar os testes conforme necessário para garantir que eles cubram todos os requisitos do código. Isso também pode ajudar a identificar quaisquer erros ou lacunas no código que possam ter sido perdidos sem os testes.

	Menor tempo de desenvolvimento: a abordagem de criar o código primeiro pode ajudar a reduzir o tempo de desenvolvimento, permitindo que o desenvolvedor se concentre em escrever o código com mais rapidez e sem interrupções constantes para criar e executar testes.

	Melhor cobertura de teste: escrever os testes depois de criar o código pode ajudar a garantir que todos os caminhos possíveis do código sejam testados, incluindo casos de uso que podem não ter sido considerados inicialmente.

	No entanto, é importante lembrar que a abordagem de criar o código primeiro e o teste depois não é adequada para todos os projetos ou situações. Em alguns casos, pode ser necessário escrever os testes primeiro, especialmente em projetos onde a qualidade do código é crítica ou onde a conformidade com padrões ou requisitos externos é exigida.

- Vantagens de criar o teste primeiro e o codigo depois

	Criar o teste primeiro e o código depois é uma abordagem de desenvolvimento de software conhecida como Test-Driven Development (TDD), que tem várias vantagens, tais como:

	Melhor design: escrever os testes antes de escrever o código pode ajudar a garantir que o código seja bem projetado e modular. Isso ocorre porque os testes se concentram em como o código deve funcionar e quais são os seus requisitos, em vez de como o código deve ser implementado. Isso pode levar a um código mais limpo e organizado.

	Maior cobertura de teste: escrever os testes primeiro pode ajudar a garantir que todos os requisitos do código sejam testados, inclusive aqueles que podem ser perdidos se o código for escrito primeiro e os testes depois.

	Detecção mais rápida de erros: escrever os testes primeiro pode ajudar a detectar erros mais cedo no processo de desenvolvimento, reduzindo a necessidade de depurar o código posteriormente.

	Maior confiança no código: escrever os testes primeiro pode ajudar a garantir que o código esteja funcionando corretamente desde o início. Isso pode aumentar a confiança no código e reduzir a necessidade de realizar testes manuais demorados.

	Melhor colaboração em equipe: escrever os testes primeiro pode ajudar a promover uma melhor colaboração em equipe, permitindo que os desenvolvedores trabalhem juntos para definir os requisitos e garantir que o código esteja funcionando corretamente.

	No entanto, a abordagem de criar o teste primeiro e o código depois pode ser mais demorada do que a abordagem de criar o código primeiro. Além disso, pode exigir um planejamento cuidadoso e uma compreensão clara dos requisitos do código antes de começar a escrever os testes.

- Cenários de teste

	Cenários de teste em Java (ou em testes de software em geral) são conjuntos de passos ou condições específicas que descrevem um caso de uso ou um fluxo de trabalho que precisa ser testado. Eles descrevem como um sistema deve se comportar em determinadas circunstâncias e permitem que os testadores verifiquem se o software está funcionando corretamente de acordo com as expectativas do usuário.

	Os cenários de teste são usados para testar as funcionalidades do software e podem ser escritos em diferentes níveis de detalhes, dependendo da complexidade do sistema e dos requisitos de teste. Por exemplo, um cenário de teste simples pode envolver apenas um único passo para verificar se um campo de entrada aceita dados de entrada válidos, enquanto um cenário mais complexo pode envolver vários passos para testar todo o fluxo de trabalho de um aplicativo.

	Para criar cenários de teste eficazes, é importante definir claramente o objetivo do teste, especificar todas as condições de entrada e saída necessárias e garantir que o cenário seja repetível e fácil de executar. Isso pode incluir a criação de dados de teste de amostra, a preparação do ambiente de teste e a documentação de todos os passos do cenário.

	Os cenários de teste são geralmente escritos em conjunto com casos de teste, que descrevem como os testes serão executados. Eles são uma parte importante do processo de teste de software, ajudando a garantir que o software atenda aos requisitos do usuário e que esteja funcionando corretamente antes de ser liberado para uso.

- Casos de teste

	Casos de teste em Java (e em testes de software em geral) são conjuntos específicos de condições e passos que são usados para testar um determinado aspecto ou funcionalidade de um sistema ou aplicativo. Eles são usados para verificar se o software está funcionando corretamente e se atende aos requisitos do usuário.

	Cada caso de teste é projetado para testar um cenário específico e pode incluir várias etapas, incluindo a preparação do ambiente de teste, a entrada de dados e a verificação dos resultados. Os casos de teste também podem incluir informações sobre as condições de teste, como o ambiente de teste, a configuração do sistema e os dados de entrada.

	Os casos de teste geralmente são escritos em conjunto com os requisitos do sistema e com os cenários de teste. Eles são usados pelos testadores para garantir que todas as funcionalidades do sistema sejam testadas e que o software esteja funcionando corretamente. Além disso, os casos de teste também são usados para medir a cobertura de teste, o que ajuda a identificar áreas do software que não foram testadas adequadamente.

	Ao escrever casos de teste, é importante garantir que eles sejam precisos, completos e fáceis de entender e executar. Eles também devem ser atualizados regularmente para garantir que o software esteja sendo testado de forma adequada e que as alterações no sistema sejam adequadamente testadas.

- TDD

	TDD (Test-Driven Development) é uma prática de desenvolvimento de software que se concentra na escrita de testes automatizados antes da implementação do código de produção. Essa abordagem envolve três etapas principais: escrever um teste automatizado que falha, implementar o código que faz o teste passar e refatorar o código para melhorá-lo.

	O objetivo principal do TDD é garantir que o código seja testado de forma abrangente e consistente desde o início do processo de desenvolvimento. Ao escrever testes automatizados antes de implementar o código de produção, os desenvolvedores podem garantir que o código faça o que se espera dele e que não haja regressão de funcionalidades já implementadas.

	Alguns dos benefícios do TDD incluem:

	Melhoria da qualidade do código: Como os testes automatizados são escritos antes da implementação do código, os desenvolvedores podem se concentrar em escrever código de alta qualidade que atenda aos requisitos dos testes.

	Redução de erros: Como os testes são executados automaticamente após cada alteração de código, o TDD pode ajudar a identificar erros e bugs mais cedo no processo de desenvolvimento, tornando-os mais fáceis e menos dispendiosos de corrigir.

	Maior eficiência: Ao escrever testes automatizados primeiro, os desenvolvedores podem economizar tempo e esforço a longo prazo, evitando a necessidade de depurar e corrigir erros de software mais tarde no processo de desenvolvimento.

	Facilitação da manutenção do código: O TDD pode tornar a manutenção do código mais fácil, pois os testes automatizados garantem que as mudanças no código não afetem inadvertidamente outras partes do sistema.

	Melhoria da colaboração da equipe: O TDD incentiva a colaboração entre desenvolvedores e equipes de teste, pois os testes automatizados são uma parte integrante do processo de desenvolvimento.

- JUnit

	JUnit é um framework de teste unitário para a linguagem de programação Java. Ele é usado por desenvolvedores Java para escrever testes automatizados para seus aplicativos, a fim de garantir que cada parte do código funcione corretamente e atenda aos requisitos especificados.

	O JUnit é baseado em anotações Java, que são marcadores colocados acima de métodos específicos que indicam que o método é um teste. O framework fornece uma série de asserções, que são declarações que afirmam que uma determinada condição é verdadeira, e os resultados dos testes podem ser verificados automaticamente.

	O JUnit é amplamente utilizado em projetos Java e é uma das ferramentas mais populares para teste unitário. Ele é simples de usar, possui uma grande variedade de recursos e é amplamente suportado pela comunidade Java.

	Os benefícios do uso do JUnit incluem:

	Melhoria da qualidade do software: O JUnit permite que os desenvolvedores testem seus aplicativos em um nível granular, identificando erros e bugs no código antes que eles se tornem problemas maiores.

	Facilitação da manutenção do software: Com testes automatizados, os desenvolvedores podem modificar o código com confiança, sabendo que não estão afetando inadvertidamente outras partes do aplicativo.

	Economia de tempo e recursos: O JUnit permite que os desenvolvedores automatizem testes repetitivos, economizando tempo e recursos em comparação com testes manuais.

	Documentação do software: Os testes JUnit fornecem documentação automática do código e da funcionalidade do software, permitindo que outros membros da equipe entendam melhor como o código funciona e como ele pode ser modificado ou melhorado.

	Facilitação da colaboração da equipe: O JUnit é amplamente usado e suportado pela comunidade Java, o que significa que os desenvolvedores podem compartilhar facilmente seus testes com outros membros da equipe.

- Adicionando JUnit no projeto manualmente

	A biblioteca JUnit é bem antiga, muito conhecida e muito utilizada, desta forma para inserir a mesma em um projeto manualmente basta declarar um método de teste, será solicitada a importação do JUnit automaticamente, basta escolher a versão desejada.

- Adicionando JUnit no projeto de forma "automatica"

	Normalmente é utilizado o Maven como gestor de dependencias, desta forma voce pode adicionar o JUnit de forma automatica ao seu projeto.

- Quais métodos de testes criar

	Devemos testar somente classes com regras de negocios, classes com regras de validação ou classes que possivelmente sofrerão muitas modificações, classes de dominio de modelo não precisam ser testadas.

- Padrão de local e nome de uma classe de teste

	Classes de testes normalmente ficam em um pacote espeficico para as classes de teste, em um projeto Maven por exemplo elas ficam em "/srv/test/java".

	Elas são nomeadas com o mesmo nome da classe que irão testar porem ao final acrescentamos "Test", por exemplo, uma classe "Conta" teria uma classe de teste com o nome "ContaTest".

- Padrão de nome de um método de teste

	Os métodos de teste devem receber nomes que deixem de forma explicita o que se espera deles, por exemplo:

	"void bonusDeveriaSerZeroParaFuncionarioComSalarioMuitoAlto() {..."

	Desta forma fica facil identificar o que ele faz e assim efetuar as validações necessarias.

	Não tem problema o nome ser muito extenso pois estes métodos não serão chamados manualmente e sim pelo JUnit.

- Anotações

	Em Java, anotações (também conhecidas como "annotations") são uma forma de adicionar metadados ao código fonte. Elas são uma forma de associar informações adicionais com classes, métodos, variáveis ou outros elementos do código Java.

	As anotações em Java são identificadas por um símbolo de arroba (@) seguido pelo nome da anotação. Elas podem incluir parâmetros opcionais que fornecem mais detalhes ou especificações sobre a anotação. As anotações são lidas em tempo de compilação ou em tempo de execução, dependendo de como foram projetadas.

	As anotações em Java são amplamente usadas em frameworks e bibliotecas para definir comportamentos, configurar opções e executar tarefas específicas, sem a necessidade de escrever código adicional. Elas também são usadas para documentar o código, fornecendo informações sobre o propósito e o comportamento esperado de uma classe ou método.

	Temos diversas anotações que são utilizadas em teste, seguem as principais:

	@Test - Indica que o método abaixo é um método de teste

	@BeforeEach - Indica que o método abaixo deve ser executado antes de cada método de teste

	@AfterEach - Indica que o método abaixo deve ser executado após cada método de teste

	@BeforeAll - Indica que o método abaixo deve ser executado antes de tudo (1 vez somente) na classe de teste

	@AfterAll - Indica que o método abaixo deve ser executado ao final de tudo (1 vez somente) na classe de teste

- Criando uma classe de teste

	A classe de teste é uma classe normal, a unica diferença é que utilizamos algumas anotações em alguns métodos que determinam algumas ações.

	Para determinar uma classe de teste criamos ela normalmente, criamos um método e colocamos a anotação "@Test" para determinar que este e um  método de teste, por exemplo:

		public class CalculadoraTest {

			@Test
			public void deveriaSomarDoisNumerosPositivos() {
				...
			}
			
		}

- Executando o teste da classe

	Basicamente o teste é a comparação entre um valor pré-determinado com o valor que o método a ser testado retorna, caso os valores sejam iguais o teste passou, caso os valores sejam diferentes o teste não passou.

	Utilizaremos o exemplo abaixo, esta é uma classe comum que será testada:

		public class Calculadora {
		
			public Integer soma(Integer n1, Integer n2) {
				return n1 + n2; 
			}
			
		}

	Inicialmente criamos a classe de teste "CalculadoraTest", nela criamos o método de teste "deveriaSomarDoisNumerosPositivos", este método tem uma descrição clara do que esperamos dele, colocamos então a anotação @Test em cima do mesmo:

		public class CalculadoraTest {

			@Test
			public void deveriaSomarDoisNumerosPositivos() {
				Calculadora calc = new Calculadora();
				int soma = calc.soma(3, 7);
				Assert.assertEquals(10, soma);
			}
			
		}

	O teste em si é feito com o método estatico "assertEquals" (da classe Assert), como primeiro parametro informamos o valor esperado, o segundo parametro é o valor gerado pelo método e que será comparado.

- Classe Assert

	A classe Assert em Java é uma classe utilitária que fornece métodos estáticos para ajudar na criação de afirmações (assertions) em código Java.

	As afirmações (assertions) são usadas para verificar suposições sobre o estado do programa em tempo de execução. Elas podem ajudar a detectar erros e falhas no programa de forma rápida, tornando mais fácil a identificação e correção de problemas.

	A classe Assert contém vários métodos estáticos, como "assertTrue()", "assertFalse()", "assertEquals()", "assertNotNull()", entre outros, que permitem criar afirmações que verificam condições específicas em tempo de execução. Se a condição não for verdadeira, um erro será gerado e a execução do programa será interrompida.

	É importante destacar que o uso de afirmações (assertions) em Java é uma prática recomendada, mas elas não devem ser usadas como uma forma de tratamento de erros em tempo de execução. Elas devem ser usadas para verificar suposições sobre o estado do programa que devem ser verdadeiras em tempo de execução, como pré-condições e pós-condições de métodos.

- Import estatico da classe Assert

	O import estático da classe Assert em Java é usado para importar os métodos estáticos da classe Assert diretamente no código, sem precisar usar o nome completo da classe toda vez que se deseja utilizar um método.

	O import estático é feito usando a palavra-chave "import static", seguida do nome completo da classe e do método estático que se deseja importar. Por exemplo:

	import static org.junit.Assert.assertEquals;

	Este comando importa o método estático assertEquals da classe Assert do framework JUnit. Com isso, é possível usar o método assertEquals diretamente no código, sem precisar escrever o nome completo da classe, como no exemplo abaixo:

	// Codigo antes do import estatico
	Assert.assertEquals(2, soma);

	// Codigo depois do import estatico
	assertEquals(2, soma);

	O uso do import estático pode tornar o código mais legível e fácil de entender, especialmente quando se usa muitos métodos estáticos de uma mesma classe em um código. No entanto, é importante usá-lo com moderação e apenas quando for necessário, para evitar possíveis conflitos de nomes e confusão no código.

- Exemplo de teste

	Classe a ser testada:

		public class ReajusteService {

			public void concederReajuste(Funcionario funcionario, Desempenho desempenho) {
				String porcentagemReajuste = "0.00";
				if (desempenho == Desempenho.A_DESEJAR) {
					porcentagemReajuste = "0.03";
				}
				if (desempenho == Desempenho.BOM) {
					porcentagemReajuste = "0.15";
				}
				if (desempenho == Desempenho.OTIMO) {
					porcentagemReajuste = "0.20";
				}
				BigDecimal reajuste = funcionario.getSalario().multiply(new BigDecimal(porcentagemReajuste));
				funcionario.reajustarSalario(reajuste);
			}

		}

	Métodos de testes criados para cada cenário diferente:

		@Test
		public void reajusteDeveriaSerDeTresPorcentoQuandoDesempenhoForADesejar() {
			ReajusteService service = new ReajusteService();
			Funcionario funcionario = new Funcionario("Fernando", LocalDate.now(), new BigDecimal("100.00"));
			service.concederReajuste(funcionario, Desempenho.A_DESEJAR);
			assertEquals(new BigDecimal("103.00"), funcionario .getSalario());
		}
		
		@Test
		public void reajusteDeveriaSerDeQuinzePorcentoQuandoDesempenhoForBom() {
			ReajusteService service = new ReajusteService();
			Funcionario funcionario = new Funcionario("Fernando", LocalDate.now(), new BigDecimal("100.00"));
			service.concederReajuste(funcionario, Desempenho.BOM);
			assertEquals(new BigDecimal("115.00"), funcionario .getSalario());
		}
		
		@Test
		public void reajusteDeveriaSerDeVintePorcentoQuandoDesempenhoForOtimo() {
			ReajusteService service = new ReajusteService();
			Funcionario funcionario = new Funcionario("Fernando", LocalDate.now(), new BigDecimal("100.00"));
			service.concederReajuste(funcionario, Desempenho.OTIMO);
			assertEquals(new BigDecimal("120.00"), funcionario .getSalario());
		}

- Refatoração

	Existe uma boa pratica de refatoração do nosso código, isso ja é conhecido, porem devemos refatorar tambem os codigos das classes de testes a fim de que os mesmos fiquem melhores, segue exemplo de refatoração dos metodos de teste anteriores:

		private ReajusteService service;
		private Funcionario funcionario;
		
		@BeforeEach
		public void inicializar() {
			this.service = new ReajusteService();
			this.funcionario = new Funcionario("Fernando", LocalDate.now(), new BigDecimal("100.00"));
		}

		@Test
		public void reajusteDeveriaSerDeTresPorcentoQuandoDesempenhoForADesejar() {
			service.concederReajuste(funcionario, Desempenho.A_DESEJAR);
			assertEquals(new BigDecimal("103.00"), funcionario .getSalario());
		}
		
		@Test
		public void reajusteDeveriaSerDeQuinzePorcentoQuandoDesempenhoForBom() {
			service.concederReajuste(funcionario, Desempenho.BOM);
			assertEquals(new BigDecimal("115.00"), funcionario .getSalario());
		}
		
		@Test
		public void reajusteDeveriaSerDeVintePorcentoQuandoDesempenhoForOtimo() {
			service.concederReajuste(funcionario, Desempenho.OTIMO);
			assertEquals(new BigDecimal("120.00"), funcionario .getSalario());
		}

	Neste caso o proposito era evitar codigo duplicado, entao extraimos parte do codigo como atributos da classe e inicializamos os mesmos antes de cada execução de método utilizando a anotação @BeforeEach.

- Testando lançamento de "exception"

	Normalmente os métodos retornam valores / objetos que podem ser comparados porem as vezes um método pode retornar uma exception, a qual tambem podemos comparar.

	Exemplo de método que pode lançar uma exception:

		public BigDecimal calcularBonus(Funcionario funcionario) {
			BigDecimal valor = funcionario.getSalario().multiply(new BigDecimal("0.1"));
			if (valor.compareTo(new BigDecimal("1000")) > 0) {
				throw new IllegalArgumentException("Funcionario com salario maior do que $10000 nao pode receber bonus");
			}
			return valor.setScale(2, RoundingMode.HALF_UP);
		}

	Podemos receber esta exception de duas formas, utilizando "assertThrows" com uma expressão lambda ou com um bloco "try-catch".

	Exemplo de um método de teste utilizando "assertThrows":

		assertThrows(IllegalArgumentException.class, () -> service.calcularBonus(new Funcionario("Fernando", LocalDate.now(), new BigDecimal("25000"))));

	Como parametros passamos a exception esperada com a extensão ".class" e depois passamos depois uma expressão lambda com o método que pode lançar a exceção.

	Exemplo de um método de teste utilizando um bloco "try-catch":

		try {
			service.calcularBonus(new Funcionario("Fernando", LocalDate.now(), new BigDecimal("25000")));
			fail("Não lançou a exceção!");
		} catch (Exception e) {
			assertEquals("Funcionario com salario maior do que $10000 nao pode receber bonus", e.getMessage());
		}

	Dentro do bloco "try" executamos o método a ser testado, em seguida ja lançamos uma falha caso o teste passe com sucesso (o que nao era esperado).

	No bloco "catch" capturamos a exceção e comparamos o valor (assertEquals) do texto esperado da exception (esta entre aspas duplas) com o resultado de e.getMessage().

	Entao alem de verificar se foilançada a exception ainda é comparado o texto que ela passou.

- Lançando erro manualmente

	Para lançar um erro em um teste utilzaimso o método "fail(<mensagem de erro>)".

	Ele dispara uma falha e ja aborta o teste do método em especifico.

	Exemplo:

	fail("Não lançou a exceção!");

- Teste de métodos privados

	Métodos privados já são testados quando os métodos que utilizam eles são testados, njão precisamos criar testes especificos para métodos privados.
